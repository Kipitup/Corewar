/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   lets_fight.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: amartinod <amartino@student.42.fr>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2020/06/29 18:34:53 by amartinod         #+#    #+#             */
/*   Updated: 2020/07/01 17:37:51 by amartinod        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "vm.h"

static uint8_t		is_param_ok(uint8_t bytecode_chunk, uint8_t type_param)
{
	uint8_t 	ret;

	ret = FALSE;
	if (bytecode_chunk >= 1 && bytecode_chunk <= 3)
	{
		if (bytecode_chunk == 3)
			bytecode_chunk++;
		ret = bytecode_chunk & type_param;
		ft_printf("%08b\n", 2, ret);
	}
	return (ret);
}

static uint8_t		verify_bytecode_and_param(uint8_t op_code, uint8_t bytecode)
{
	uint8_t		ret;
	uint8_t		bytecode_chunk;

	bytecode = 0b11101000;
	ret = FALSE;
		ft_printf("bytecode       %08b\n", 2, bytecode);
	if (g_op_tab[op_code].nb_param >= 1)
	{
		bytecode_chunk = (bytecode & 0b11000000) >> 6; 
		ft_printf("bytecode chunk %08b\n", 2, bytecode_chunk);
		ret = is_param_ok(bytecode_chunk, g_op_tab[op_code].type_param[0]);
	//	ft_printf("first param ? %08b\n", 2, bytecode & (g_op_tab[op_code].type_param[0] << 6));
	}
	if (g_op_tab[op_code].nb_param >= 2 && ret != FALSE)
	{
		bytecode_chunk = (bytecode & 0b00110000) >> 4; 
		ret = is_param_ok(bytecode_chunk, g_op_tab[op_code].type_param[1]);
	}
	if (g_op_tab[op_code].nb_param >= 3 && ret != FALSE)
	{
		bytecode_chunk = (bytecode & 0b00001100) >> 2; 
		ret = is_param_ok(bytecode_chunk, g_op_tab[op_code].type_param[2]);
	}
	return (ret);
}

static void			execute_operation(t_vm *vm, t_cursor *cursor)
{
	uint8_t		op_code;
	uint8_t		bytecode;
	uint8_t		ret;

	op_code = cursor->op_code;
	ft_printf("op code %u\n", op_code);
	if (op_code <= NB_OF_OPE)
	{
		if (g_op_tab[op_code].bytecode == TRUE)
		{
			cursor->pc++;
			bytecode = vm->arena[cursor->pc];
			ret = verify_bytecode_and_param(op_code, bytecode);
			if (ret == FALSE)
				ft_perror("Not a good param", __FILE__, __LINE__);
		}
		g_op_tab[op_code].op_func(vm, cursor);
	}
	else
		cursor->pc++;
}
void				lets_fight(t_vm *vm, t_cursor *cursor)
{
	while (cursor != NULL)
	{
		if (cursor->wait_cycle == 0)
		{
			cursor->op_code = vm->arena[cursor->pc];
			if (cursor->op_code <= NB_OF_OPE)
				cursor->wait_cycle = g_op_tab[cursor->op_code].wait_cycle;
		//	ft_printf("cursor wait cycle %zu\n", cursor->wait_cycle);
		}
		if (cursor->wait_cycle > 0)
			cursor->wait_cycle--;
		if (cursor->wait_cycle == 0)
			execute_operation(vm, cursor);
		cursor = cursor->next;
	}
}
